load("@gcc_toolchain//:defs.bzl", "with_repository_prefix")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load("@rules_cc//cc/toolchains/args:sysroot.bzl", "cc_sysroot")

cc_sysroot(
    name = "sysroot",
    sysroot = "@gcc_toolchain//:root",
)

cc_args(
    name = "environment",
    actions = ["@rules_cc//cc/toolchains/actions:all_actions"],
    env = {
        "GCC_EXEC_PREFIX": with_repository_prefix("usr/lib/gcc/"),
        "PATH": ":".join([
            with_repository_prefix("usr/bin/"),
            "/bin:/usr/bin:/usr/local/bin",
        ]),
    },
)

cc_args(
    name = "gold-linker",
    actions = ["@rules_cc//cc/toolchains/actions:link_actions"],
    args = ["-fuse-ld=gold"],
)

cc_args(
    name = "no_canonical_prefixes",
    actions = [
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions",
    ],
    args = [
        "-fno-canonical-system-headers",
        "--no-canonical-prefixes",
    ],
)

cc_args(
    name = "determinism",
    actions = [
        "@rules_cc//cc/toolchains/actions:c_compile",
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions",
    ],
    args = [
        "-Wno-builtin-macro-redefined",
        '-D__DATE__ "redacted"',
        '-D__TIMESTAMP__ "redacted"',
        '-D__TIME__ "redacted"',
    ],
)

cc_toolchain(
    name = "cc_toolchain",
    args = [
        ":sysroot",
        ":environment",
        ":determinism",
        ":gold-linker",
        ":no_canonical_prefixes",
    ],
    enabled_features = ["@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features"],
    known_features = ["@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features"],
    supports_param_files = True,
    tool_map = "//gcc/tools:tool_map",
)

toolchain(
    name = "gcc",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "//constraints:gcc",
    ],
    toolchain = ":cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
